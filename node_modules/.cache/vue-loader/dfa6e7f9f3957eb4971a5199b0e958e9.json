{"remainingRequest":"C:\\Users\\ji\\alkes\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\ji\\alkes\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\ji\\alkes\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ji\\alkes\\src\\views\\produk\\AddBarang.vue?vue&type=template&id=c1166b00&","dependencies":[{"path":"C:\\Users\\ji\\alkes\\src\\views\\produk\\AddBarang.vue","mtime":1581372451331},{"path":"C:\\Users\\ji\\alkes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581359171958},{"path":"C:\\Users\\ji\\alkes\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1581359235558},{"path":"C:\\Users\\ji\\alkes\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1581359171958},{"path":"C:\\Users\\ji\\alkes\\node_modules\\vue-loader\\lib\\index.js","mtime":1581359235552}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}