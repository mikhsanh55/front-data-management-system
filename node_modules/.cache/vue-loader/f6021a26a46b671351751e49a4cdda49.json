{"remainingRequest":"/home/mikhsanh/Documents/project/alkes/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mikhsanh/Documents/project/alkes/src/views/produk/AddBarang.vue?vue&type=template&id=f05a9cb2&","dependencies":[{"path":"/home/mikhsanh/Documents/project/alkes/src/views/produk/AddBarang.vue","mtime":1588891856233},{"path":"/home/mikhsanh/Documents/project/alkes/node_modules/cache-loader/dist/cjs.js","mtime":1581205342201},{"path":"/home/mikhsanh/Documents/project/alkes/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1581205405536},{"path":"/home/mikhsanh/Documents/project/alkes/node_modules/cache-loader/dist/cjs.js","mtime":1581205342201},{"path":"/home/mikhsanh/Documents/project/alkes/node_modules/vue-loader/lib/index.js","mtime":1581205405536}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}